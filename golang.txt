package main

import (
    "fmt"
)

func main(){
    fmt.Println("Hello, World")  //will print to terminal
}

Declare variable 
var var_name var_type

without value it has a zero value...zero value for strings is the empty string

ex: var x int = 5
    var y int = 7
    var sum int = x+y


    or 
    x: = 5
    y: = 7
    sum: = x +y

No () around conditions of if statements
 func main(){
        if x > 6 { 


    }
    else{

    }
    else if{

    }

Arrays

var arr[5]int //array that holds 5 integers, this is fixed
arr[2] = 7 //set array value in postion 2 equal to 7

arr: = [5]int{ list values here}


Slices makes an array easier to work with put empty bracket []
arr: = []int{ list values here}  //this is a slice of ints instead of an array of ints
arr = append(arr,13) //append doesn't change the original array only create a copy of the array, returns a new array


maps are like dictionary

map[type of keys ie string]type of value 
make(map[string]int)//use make to build a map functions


vertices: = make(make[string]int)

vertices["triangle"] = 2
vertices["square"] = 3
vertices["dodecagon"] = 12


fmt.Println(vertices["triangle]) //prints 2

delete(vertices, "square) //removes square from the map


Only loop in Go is for loop

func main(){
    for i =0; i < 5; i++{
        fmt.Println(i)  //prints 0,1,2,3,4
    }
}


WHILE LOOP 

func main(){
    i := 0

    for i <5 {
        fmt.Println(i)  //prints the same as above
        i++
    }
}



func main(){
    arr := []string{"a","b", "c"}

    for index, value :=  range arr{
        fmt.Println("index", index, "value", value)  //index: 0 value: a
                                                       //index: 1 value: b
                                                       //index: 2 value: c

    }

}

func main(){
    m := make(map[string]string)
    m["a"] = "alpha"
    m["b"] = " beta"

    for key, value :=  range m{
        fmt.Println("key", key, "value", value)  //key: a value: alpha
                                                       //key: b value: beta
                                            
    }

}

NEW FUNCTION
func sum(x int, yint) int{
    return x + y  // input the var name and type for arguments, after () put the type of what it will return
    }


CALL FUNCTION IN THE MAIN FUNCTION
func main(){
    result := sum(2,3)
    fmt.Println(result)
}


FUNCTION THAT RETURNS MORE THAN JUST A value

func sqrt( x float64) (float64, error){
    if x <0 {
        return 0, errors.New('Undefined for negative numbers")
    }
    return math.Sqrt(x), nil
}


call sqrt in the main function

func main() {
    result, err := sqrt(16)

    if err != nil {
        fmt.Prinln(err)
    }
    else{
        fmt.Println(result)
    }
}

